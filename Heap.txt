
Heap
A Heap is a special Tree-based data structure in which the tree is a complete binary tree. Generally, Heaps can be of two types:

Max-Heap: In a Max-Heap the key present at the root node must be greatest among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.
Min-Heap: In a Min-Heap the key present at the root node must be minimum among the keys present at all of it’s children. The same property must be recursively true for all sub-trees in that Binary Tree.


Binary Heap
A Binary Heap is a Binary Tree with following properties.
1) It’s a complete tree (All levels are completely filled except possibly the last level and the last level has all keys as left as possible). This property of Binary Heap makes them suitable to be stored in an array.

2) A Binary Heap is either Min Heap or Max Heap. In a Min Binary Heap, the key at root must be minimum among all keys present in Binary Heap. The same property must be recursively true for all nodes in Binary Tree. Max Binary Heap is similar to MinHeap.

How is Binary Heap represented?
A Binary Heap is a Complete Binary Tree. A binary heap is typically represented as an array.

The root element will be at Arr[0].
Below table shows indexes of other nodes for the ith node, i.e., Arr[i]:
Arr[(i-1)/2]	Returns the parent node
Arr[(2*i)+1]	Returns the left child node
Arr[(2*i)+2]	Returns the right child node



Basic operations
insert aka push, add a new node into the heap
remove aka pop, retrieves and removes the min or the max node of the heap
examine aka peek, retrieves, but does not remove, the min or the max node of the heap
Internal operations
heapify, maintains max or min heap property (all parent node's values should be greater/less than or equal to child node's values)
Implementations
A common implementation of a heap is the binary heap which based on binary tree data structure

You can implement a binary heap with either a static array (capacity restricted) or a dynamic array


 
Binary Max Heap implementation example with Static Array
Approach
Represented by 1-based integer array A[N+1]
With a node A[k] (1<=k<=N)
Its parent is A[k/2]
Left child is A[k*2] (k*2 <= N)
Right child is A[k*2+1] (k*2+1 <= N)
A[1] is root node, A[0] is Integer.MAX_VALUE